import streamlit as st
import pandas as pd
import pickle
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from inference import predict_churn, preprocess_input
import logging
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ—Ä—ñ–Ω—å –ø—Ä–æ—î–∫—Ç—É
current_dir = os.path.dirname(os.path.abspath(__file__))  # –ü–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è (src)
project_root = os.path.dirname(current_dir)  # –ö–æ—Ä—ñ–Ω—å –ø—Ä–æ—î–∫—Ç—É (–Ω–∞ –æ–¥–∏–Ω —Ä—ñ–≤–µ–Ω—å –≤–∏—â–µ)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Ç–∞ scaler —ñ–∑ –∫–æ—Ä–µ–Ω—è –ø—Ä–æ—î–∫—Ç—É
try:
    model_path = os.path.join(project_root, "model.pkl")
    scaler_path = os.path.join(project_root, "scaler.pkl")
    with open(model_path, "rb") as f:
        model = pickle.load(f)
    with open(scaler_path, "rb") as f:
        scaler = pickle.load(f)
    logger.info("–ú–æ–¥–µ–ª—å —ñ scaler —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")
except Exception as e:
    st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—å –∞–±–æ scaler: {e}")
    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—å –∞–±–æ scaler: {e}")
    st.stop()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
if "data" not in st.session_state:
    st.session_state.data = None
if "input_type" not in st.session_state:
    st.session_state.input_type = "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV"
if "original_ids" not in st.session_state:
    st.session_state.original_ids = None

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Streamlit-–¥–æ–¥–∞—Ç–∫–∞
st.title("–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –í—ñ–¥—Ç–æ–∫—É –ö–ª—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è –¢–µ–ª–µ–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó")

# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –ø—Ä–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ (–≤–∏–ø–∞–¥–∞—é—á–∏–π —Å–ø–∏—Å–æ–∫)
with st.expander("üìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è CSV-—Ñ–∞–π–ª—É"):
    st.markdown(
        """
        –î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –≤–∞—à CSV-—Ñ–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏:
        - **id**: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–ª—ñ—î–Ω—Ç–∞ (—Ü—ñ–ª–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1001)
        - **is_tv_subscriber**: –ß–∏ —î –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¢–ë (0 –∞–±–æ 1)
        - **is_movie_package_subscriber**: –ß–∏ —î –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞–∫–µ—Ç —Ñ—ñ–ª—å–º—ñ–≤ (0 –∞–±–æ 1)
        - **subscription_age**: –í—ñ–∫ –ø—ñ–¥–ø–∏—Å–∫–∏ –≤ —Ä–æ–∫–∞—Ö (–¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ)
        - **reamining_contract**: –ó–∞–ª–∏—à–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –≤ —Ä–æ–∫–∞—Ö (–¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ –∞–±–æ 0)
        - **service_failure_count**: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–º–æ–≤ —Å–µ—Ä–≤—ñ—Å—É (—Ü—ñ–ª–µ —á–∏—Å–ª–æ ‚â• 0)
        - **download_avg**: –°–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ –ú–ë (–¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ)
        - **upload_avg**: –°–µ—Ä–µ–¥–Ω—î –≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ –ú–ë (–¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ)
        - **download_over_limit**: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≤–∏—â–µ–Ω—å –ª—ñ–º—ñ—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (—Ü—ñ–ª–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 7)

        –Ø–∫—â–æ –±—É–¥—å-—è–∫–∞ –∑ –∫–æ–ª–æ–Ω–æ–∫ –≤—ñ–¥—Å—É—Ç–Ω—è, –≤–æ–Ω–∞ –±—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ –Ω—É–ª—è–º–∏, \
        —â–æ –º–æ–∂–µ –≤–ø–ª–∏–Ω—É—Ç–∏ –Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—É.
        """
    )

# –®–∞–±–ª–æ–Ω CSV –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–¥–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å id)
template_data = pd.DataFrame(
    {
        "id": [1001],
        "is_tv_subscriber": [1],
        "is_movie_package_subscriber": [0],
        "subscription_age": [2.5],
        "reamining_contract": [1.0],
        "service_failure_count": [0],
        "download_avg": [100.0],
        "upload_avg": [10.0],
        "download_over_limit": [0],
    }
)
template_csv = template_data.to_csv(index=False)
st.download_button(
    label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à–∞–±–ª–æ–Ω CSV",
    data=template_csv,
    file_name="template_churn_prediction.csv",
    mime="text/csv",
)

# –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É –≤–≤–µ–¥–µ–Ω–Ω—è
tabs = st.tabs(["üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV", "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É"])

# –í–∫–ª–∞–¥–∫–∞ 1: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV
with tabs[0]:
    st.subheader("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞ —Ñ–∞–π–ª–æ–º")
    uploaded_file = st.file_uploader("–û–±–µ—Ä—ñ—Ç—å CSV —Ñ–∞–π–ª", type="csv", key="csv_uploader")

    if uploaded_file is not None:
        try:
            st.session_state.data = pd.read_csv(uploaded_file)
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ ID –ø–µ—Ä–µ–¥ –æ–±—Ä–æ–±–∫–æ—é
            id_col = None
            for col in st.session_state.data.columns:
                if col.lower() in ["id", "client_id", "customer_id"]:
                    id_col = col
                    break
            if id_col:
                st.session_state.original_ids = st.session_state.data[id_col].copy()
                logger.info(f"–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ ID –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ —Å—Ç–æ–≤–ø—Ü—è: {id_col}")
            else:
                st.session_state.original_ids = None
                logger.warning("–°—Ç–æ–≤–ø–µ—Ü—å 'id' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ CSV. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ ID.")
                st.warning(
                    "–°—Ç–æ–≤–ø–µ—Ü—å 'id' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ CSV. ID –∫–ª—ñ—î–Ω—Ç—ñ–≤ –±—É–¥—É—Ç—å –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ."
                )

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –ø–µ—Ä–µ–¥ –æ–±—Ä–æ–±–∫–æ—é
            required_cols = [
                "is_tv_subscriber",
                "is_movie_package_subscriber",
                "subscription_age",
                "reamining_contract",
                "service_failure_count",
                "download_avg",
                "upload_avg",
                "download_over_limit",
            ]
            missing_cols = [
                col for col in required_cols if col not in st.session_state.data.columns
            ]
            if missing_cols:
                st.error(
                    f"–£–≤–∞–≥–∞! –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}. "
                    "–í–æ–Ω–∏ –±—É–¥—É—Ç—å –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –Ω—É–ª—è–º–∏, —â–æ –º–æ–∂–µ —Å—É—Ç—Ç—î–≤–æ –≤–ø–ª–∏–Ω—É—Ç–∏ –Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—É. "
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à –¥–∞—Ç–∞—Å–µ—Ç –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è —à–∞–±–ª–æ–Ω–æ–º CSV."
                )
                logger.warning(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ CSV: {missing_cols}")

            st.success("–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
            logger.info("–§–∞–π–ª CSV —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")
            st.dataframe(st.session_state.data)
        except Exception as e:
            st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª: {e}")
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª: {e}")
            st.session_state.data = None
            st.session_state.original_ids = None
    else:
        if st.session_state.input_type != "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É":
            st.session_state.data = None
            st.session_state.original_ids = None
        st.info("–û—á—ñ–∫—É—é –Ω–∞ —Ñ–∞–π–ª...")

    st.session_state.input_type = "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV"

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ó—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑" —É –≤–∫–ª–∞–¥—Ü—ñ CSV
    if st.button("–ó—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è CSV", key="predict_csv"):
        if st.session_state.data is not None:
            try:
                processed_data = preprocess_input(
                    st.session_state.data, scaler=scaler, logger=logger
                )
                preds = predict_churn(model, processed_data, logger=logger)
                logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ –≤–∏–∫–æ–Ω–∞–Ω–æ –¥–ª—è CSV. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤: {len(preds)}")

                st.session_state.preds = preds
                st.session_state.show_results = True
            except Exception as e:
                st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è: {str(e)}")
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è: {str(e)}")
                st.session_state.show_results = False
        else:
            st.error("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV-—Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è–º.")
            st.session_state.show_results = False

# –í–∫–ª–∞–¥–∫–∞ 2: –†—É—á–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è
with tabs[1]:
    st.subheader("–í–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞")
    with st.form("client_form"):
        id = st.number_input("–í–≤–µ–¥—ñ—Ç—å id", min_value=0, step=1)
        is_tv_subscriber = int(st.checkbox("–Ñ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¢–ë"))
        is_movie_package_subscriber = int(st.checkbox("–Ñ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞–∫–µ—Ç –∑ —Ñ—ñ–ª—å–º–∞–º–∏"))
        subscription_age = st.number_input("–í–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ –ø—ñ–¥–ø–∏—Å–∫–∏ (—Ä–æ–∫–∏)", min_value=0.0, step=0.1)
        reamining_contract = st.number_input(
            "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ª–∏—à–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É (—Ä–æ–∫–∏)", min_value=0.0, step=0.1
        )
        service_failure_count = st.number_input(
            "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–º–æ–≤ —Å–µ—Ä–≤—ñ—Å—É", min_value=0, step=1
        )
        download_avg = st.number_input("–í–≤–µ–¥—ñ—Ç—å —Å–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–ú–ë)", min_value=0.0, step=0.1)
        upload_avg = st.number_input("–í–≤–µ–¥—ñ—Ç—å —Å–µ—Ä–µ–¥–Ω—î –≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–ú–ë)", min_value=0.0, step=0.1)
        download_over_limit = st.selectbox(
            "–°–∫–∞—á—É–≤–∞–Ω–Ω—è –ø–æ–∑–∞ –ª—ñ–º—ñ—Ç–æ–º", options=[0, 1, 2, 3, 4, 5, 6, 7]
        )

        submitted = st.form_submit_button("–ó—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑")

        if submitted:
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            if subscription_age < 0 or download_avg < 0 or upload_avg < 0:
                st.error("–í–≤–µ–¥–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—ñ–¥‚Äô—î–º–Ω–∏–º–∏!")
                logger.error("–í–≤–µ–¥–µ–Ω—ñ –≤—ñ–¥‚Äô—î–º–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∏ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—ñ.")
            else:
                st.session_state.data = pd.DataFrame(
                    [
                        {
                            "id": id,
                            "is_tv_subscriber": is_tv_subscriber,
                            "is_movie_package_subscriber": is_movie_package_subscriber,
                            "subscription_age": subscription_age,
                            "reamining_contract": reamining_contract,
                            "service_failure_count": service_failure_count,
                            "download_avg": download_avg,
                            "upload_avg": upload_avg,
                            "download_over_limit": download_over_limit,
                        }
                    ]
                )
                st.session_state.original_ids = [id]  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π ID
                logger.info("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è.")
                st.session_state.input_type = "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É"

                # –í–∏–∫–æ–Ω—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è
                try:
                    processed_data = preprocess_input(
                        st.session_state.data, scaler=scaler, logger=logger
                    )
                    preds = predict_churn(model, processed_data, logger=logger)
                    logger.info(
                        f"–ü—Ä–æ–≥–Ω–æ–∑ –≤–∏–∫–æ–Ω–∞–Ω–æ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤: {len(preds)}"
                    )

                    st.session_state.preds = preds
                    st.session_state.show_results = True
                except Exception as e:
                    st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è: {str(e)}")
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è: {str(e)}")
                    st.session_state.show_results = False

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
if (
    "show_results" in st.session_state
    and st.session_state.show_results
    and "preds" in st.session_state
):
    preds = st.session_state.preds
    input_type = st.session_state.input_type

    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑—É:")
    recommendation = {
        "–í–∏—Å–æ–∫–∞": "–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º (ID: {client_id}) –¥–ª—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∑–Ω–∏–∂–æ–∫\
         –∞–±–æ —ñ–Ω—à–∏—Ö —É—Ç—Ä–∏–º—É—é—á–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤.",
        "–°–µ—Ä–µ–¥–Ω—è": "–ö–ª—ñ—î–Ω—Ç (ID: {client_id}) –º–æ–∂–µ –±—É—Ç–∏ –≤ –∑–æ–Ω—ñ —Ä–∏–∑–∏–∫—É, –≤–∞—Ä—Ç–æ –∑–≤–µ—Ä–Ω—É—Ç–∏ —É–≤–∞–≥—É.",
        "–ù–∏–∑—å–∫–∞": "–ö–ª—ñ—î–Ω—Ç (ID: {client_id}), –π–º–æ–≤—ñ—Ä–Ω–æ, –∑–∞–ª–∏—à–∏—Ç—å—Å—è –∑ –∫–æ–º–ø–∞–Ω—ñ—î—é.",
    }
    for i, p in enumerate(preds):
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–ª—ñ—î–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —É–º–æ–≤–Ω–∏–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
        client_id = (
            st.session_state.original_ids[i] if st.session_state.original_ids is not None else i + 1
        )

        if p > 0.7:
            color = "red"
            level = "–í–∏—Å–æ–∫–∞"
        elif p < 0.3:
            color = "green"
            level = "–ù–∏–∑—å–∫–∞"
        else:
            color = "orange"
            level = "–°–µ—Ä–µ–¥–Ω—è"

        st.markdown(
            f"""
            <div style='
                background-color:{color};
                padding:10px;
                border-radius:5px;
                color:white;
                font-weight:bold;
                margin-bottom:10px'>
                ‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç (ID: {client_id}): {level} –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ç–æ–∫—É ‚Äî {p:.2f}
            </div>
            <div style='padding:5px; color:black;'>
                {recommendation[level].format(client_id=client_id)}
            </div>
            """,
            unsafe_allow_html=True,
        )

    # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if len(preds) == 1:
        client_id = (
            st.session_state.original_ids[0] if st.session_state.original_ids is not None else 1
        )
        st.subheader(f"–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –≤—ñ–¥—Ç–æ–∫—É –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ (ID: {client_id})")
        fig = go.Figure(
            go.Indicator(
                mode="gauge+number",
                value=preds[0],
                title={"text": "–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ç–æ–∫—É"},
                gauge={
                    "axis": {"range": [0, 1]},
                    "bar": {"color": "darkblue"},
                    "steps": [
                        {"range": [0, 0.3], "color": "green"},
                        {"range": [0.3, 0.7], "color": "orange"},
                        {"range": [0.7, 1], "color": "red"},
                    ],
                },
            )
        )
        st.plotly_chart(fig)

    # –¢–∞–±–ª–∏—Ü—è —Ç–∞ –µ–∫—Å–ø–æ—Ä—Ç –¥–ª—è CSV
    if input_type == "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV":
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ ID
        if st.session_state.original_ids is not None:
            client_ids = st.session_state.original_ids
        else:
            client_ids = range(1, len(preds) + 1)

        results_df = pd.DataFrame(
            {
                "ID –∫–ª—ñ—î–Ω—Ç–∞": client_ids,
                "–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ç–æ–∫—É": [f"{p:.2f}" for p in preds],
                "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Ä–∏–∑–∏–∫—É": [
                    "–í–∏—Å–æ–∫–∞" if p > 0.7 else "–°–µ—Ä–µ–¥–Ω—è" if p > 0.3 else "–ù–∏–∑—å–∫–∞" for p in preds
                ],
            }
        )
        st.subheader("–ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
        st.dataframe(results_df)
        results_csv = results_df.to_csv(index=False)
        st.download_button(
            label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑—É",
            data=results_csv,
            file_name="churn_predictions.csv",
            mime="text/csv",
        )

    # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–¥–∞—Ç–∞—Å–µ—Ç)
    if input_type == "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV" and len(preds) > 1:
        st.subheader("–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π –≤—ñ–¥—Ç–æ–∫—É")
        logger.info("–°—Ç–≤–æ—Ä—é—î–º–æ –≥—ñ—Å—Ç–æ–≥—Ä–∞–º—É –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç—É...")
        plt.style.use("ggplot")
        fig, ax = plt.subplots(figsize=(10, 6))

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ ID –¥–ª—è –æ—Å—ñ X
        if st.session_state.original_ids is not None:
            x_labels = st.session_state.original_ids
        else:
            x_labels = range(1, len(preds) + 1)

        bars = ax.bar(
            range(len(preds)),
            preds,
            color=["red" if p > 0.7 else "orange" if p > 0.3 else "green" for p in preds],
        )
        ax.set_xticks(range(len(preds)))
        ax.set_xticklabels(x_labels, rotation=90, ha="center")

        for bar, p in zip(bars, preds):
            height = bar.get_height()
            ax.text(
                bar.get_x() + bar.get_width() / 2.0,
                height,
                f"{height:.2f}",
                ha="center",
                va="bottom",
            )

        ax.grid(True, axis="y", linestyle="--", alpha=0.7)
        from matplotlib.patches import Patch

        legend_elements = [
            Patch(facecolor="red", label="–í–∏—Å–æ–∫–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å (>0.7)"),
            Patch(facecolor="orange", label="–°–µ—Ä–µ–¥–Ω—è –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å (0.3-0.7)"),
            Patch(facecolor="green", label="–ù–∏–∑—å–∫–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å (<0.3)"),
        ]
        ax.legend(handles=legend_elements, loc="best")
        ax.set_xlabel("–ö–ª—ñ—î–Ω—Ç (ID)")
        ax.set_ylabel("–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ç–æ–∫—É")
        ax.set_title("–ô–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –≤—ñ–¥—Ç–æ–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤")
        st.pyplot(fig)
        plt.clf()  # –û—á–∏—â–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ –ø—ñ—Å–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    else:
        logger.info(
            f"–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è: input_type={input_type}, len(preds)={len(preds)}"
        )
else:
    if "show_results" not in st.session_state or not st.session_state.show_results:
        st.info("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ —Ç–∞ –∑—Ä–æ–±—ñ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.")
